// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique 
  users User[]

  @@map("role")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  password          String
  roles             Role[]
  lastname          String
  firstname         String
  address           String?
  phoneNumber       String         @unique
  gender            Gender
  credit            Int            @default(0)
  posts             Post[]
  rates             Rate[]
  comments          Comment[]
  dislikes         PostDislike[]
  likes           PostLike[]
  followings        UserFollow[]   @relation("Followings")
  followers         UserFollow[]   @relation("Followers")
  reports           Report[]
  sentMessages      Message[]      @relation("SenderMessages")
  receivedMessages  Message[]      @relation("ReceiverMessages")
  notifications     Notification[] @relation("UserNotifications")
  favorites         Favorite[]
  userRecharges     Recharge[]     @relation("UserRecharges")
  receivedRecharges Recharge[]     @relation("ReceivedRecharges")
  story             Story[]
  femaleMeasurements FemaleMeasurement[]
  maleMeasurements   MaleMeasurement[]
  blocks            Block[] @relation("UserBlocks")
  blockedBy         Block[] @relation("BlockedUsers")

  @@map("user")
}

model Block {
  id        Int  @id @default(autoincrement())
  blockerId Int
  blockedId Int
  blocker   User @relation("UserBlocks", fields: [blockerId], references: [id])
  blocked   User @relation("BlockedUsers", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@map("block")
}

model Report {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  reason    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("report")
}

model UserFollow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User @relation("Followers", fields: [followerId], references: [id])
  following   User @relation("Followings", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("user_follow")
}

model Post {
  id          Int        @id @default(autoincrement())
  content     String
  description String?    @db.VarChar(800)
  status      Boolean    @default(true)
  views       Int        @default(0)
  authorId    Int
  author      User       @relation(fields: [authorId], references: [id])
  publishedAt DateTime   @default(now())
  nbFavorites Int        @default(0)
  photoUrl    String?
  rates       Rate[]
  comments    Comment[]
  postLikes   PostLike[]
  postDislikes PostDislike[]
  reports     Report[]
  favorites   Favorite[]

  @@map("post")
}

model Rate {
  id          Int      @id @default(autoincrement())
  stars       Float    @db.Float
  description String?  @db.VarChar(800)
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())

  @@map("rate")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(800)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comment")
}

model PostDislike {
  id          Int      @id @default(autoincrement())
  post        Post     @relation(fields: [postId], references: [id])
  postId      Int
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())

  @@map("post_dislike")
}

model PostLike {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@map("post_like")
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("message")
}

model Notification {
  id         Int      @id @default(autoincrement())
  receiverId Int
  receiver   User     @relation("UserNotifications", fields: [receiverId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)

  @@map("notification")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@map("favorite")
}

model Recharge {
  id         Int      @id @default(autoincrement())
  user       User     @relation("UserRecharges", fields: [userId], references: [id])
  userId     Int
  receiverId Int
  receiver   User     @relation("ReceivedRecharges", fields: [receiverId], references: [id])
  code       Int      @unique
  amount     Float
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("recharge")
}

model Story {
  id          Int       @id @default(autoincrement())
  content     String
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  publishedAt DateTime  @default(now())
  expiresAt   DateTime?

  @@map("story")
}

enum Gender {
  MALE
  FEMALE
}

model MaleMeasurement {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id])
  userId       Int
  gender       Gender
  shoulder     Float?
  chest        Float?
  waist        Float?
  hips         Float?
  sleeveLength Float?
  neck         Float?
  back         Float?
  armhole      Float?
  thigh        Float?
  calf         Float?

  @@map("male_measurement")
}

model FemaleMeasurement {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  gender   Gender
  shoulder Float?
  chest    Float?
  waist    Float?
  hips     Float?
  bust     Float?
  inseam   Float?
  thigh    Float?

  @@map("female_measurement")
}

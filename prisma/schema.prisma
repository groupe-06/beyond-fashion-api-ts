model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("role")
}

model User {
  id                 Int                 @id @default(autoincrement())
  email              String              @unique
  password           String
  roles              Role[]
  lastname           String
  firstname          String
  address            String?
  phoneNumber        String              @unique
  gender             Gender
  photoUrl           String?
  credit             Int                 @default(0)
  posts              Post[]
  rates              Rate[]
  comments           Comment[]
  dislikes           PostDislike[]
  likes              PostLike[]
  followings         UserFollow[]        @relation("Followings")
  followers          UserFollow[]        @relation("Followers")
  reports            Report[]
  sentMessages       Message[]           @relation("SenderMessages")
  receivedMessages   Message[]           @relation("ReceiverMessages")
  notifications      Notification[]      @relation("UserNotifications")
  favorites          Favorite[]
  userRecharges      Recharge[]          @relation("UserRecharges")
  receivedRecharges  Recharge[]          @relation("ReceivedRecharges")
  story              Story[]
  femaleMeasurements FemaleMeasurement[]
  maleMeasurements   MaleMeasurement[]
  blocks             Block[]             @relation("UserBlocks")
  blockedBy          Block[]             @relation("BlockedUsers")
  articles           Article[]

  @@map("user")
}

model Article {
  id            Int      @id @default(autoincrement())
  name          String
  stockQuantity Int
  unitPrice     Float
  photo         String
  color         String
  userId        Int // Le vendeur est maintenant référencé comme un User
  user          User     @relation(fields: [userId], references: [id])
  categoryId    Int
  category      Category @relation(fields: [categoryId], references: [id])
  tags          Tag[]
  posts         Post[]

  @@map("article")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  image    String
  unitId   Int?
  unit     Unit?     @relation(fields: [unitId], references: [id])
  articles Article[]

  @@map("category")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String
  articles Article[]

  @@map("tag")
}

model Unit {
  id         Int        @id @default(autoincrement())
  name       String
  categories Category[]

  @@map("unit")
}

enum Gender {
  MALE
  FEMALE
}

model Block {
  id        Int  @id @default(autoincrement())
  blockerId Int
  blockedId Int
  blocker   User @relation("UserBlocks", fields: [blockerId], references: [id])
  blocked   User @relation("BlockedUsers", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@map("block")
}

model Report {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  reason    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("report")
}

model UserFollow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User @relation("Followers", fields: [followerId], references: [id])
  following   User @relation("Followings", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("user_follow")
}

model Post {
  id           Int           @id @default(autoincrement())
  content      String
  description  String?
  status       Boolean       @default(true)
  views        Int           @default(0)
  authorId     Int
  author       User          @relation(fields: [authorId], references: [id])
  publishedAt  DateTime      @default(now())
  nbFavorites  Int           @default(0)
  rates        Rate[]
  comments     Comment[]
  postLikes    PostLike[]
  postDislikes PostDislike[]
  reports      Report[]
  favorites    Favorite[]
  articles     Article[]

  @@map("post")
}

model Rate {
  id          Int      @id @default(autoincrement())
  stars       Float
  description String?
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())

  @@map("rate")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  parentId  Int? // For sub-comments
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("comment")
}

model PostDislike {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@map("post_dislike")
}

model PostLike {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@map("post_like")
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("message")
}

model Notification {
  id         Int      @id @default(autoincrement())
  receiverId Int
  receiver   User     @relation("UserNotifications", fields: [receiverId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)

  @@map("notification")
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@map("favorite")
}

model Recharge {
  id         Int      @id @default(autoincrement())
  user       User     @relation("UserRecharges", fields: [userId], references: [id])
  userId     Int
  receiverId Int
  receiver   User     @relation("ReceivedRecharges", fields: [receiverId], references: [id])
  amount     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("recharge")
}

model Story {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("story")
}

model FemaleMeasurement {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
  height Int
  weight Int
  waist  Int
  hips   Int
  chest  Int

  @@map("female_measurement")
}

model MaleMeasurement {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
  height Int
  weight Int
  chest  Int
  waist  Int
  neck   Int

  @@map("male_measurement")
}

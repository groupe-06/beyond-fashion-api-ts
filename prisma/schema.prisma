generator client {
  provider = "prisma-client-js"
}

// provider = "mysql"
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("role")
}

model User {
  id                  Int                 @id @default(autoincrement())
  email               String              @unique
  password            String
  roles               Role[]
  lastname            String
  firstname           String
  address             String?
  phoneNumber         String              @unique
  gender              Gender
  photoUrl            String?
  credit              Int                 @default(0)
  posts               Post[]
  rates               Rate[]
  comments            Comment[]
  dislikes            PostDislike[]
  likes               PostLike[]
  followings          UserFollow[]        @relation("Followings")
  followers           UserFollow[]        @relation("Followers")
  reports             Report[]
  sentMessages        Message[]           @relation("SenderMessages")
  receivedMessages    Message[]           @relation("ReceiverMessages")
  notifications       Notification[]      @relation("UserNotifications")
  emetorNotifications Notification[]      @relation("EmetorNotifications")
  favorites           Favorite[]
  userRecharges       Recharge[]          @relation("UserRecharges")
  receivedRecharges   Recharge[]          @relation("ReceivedRecharges")
  story               Story[]
  femaleMeasurements  FemaleMeasurement[]
  maleMeasurements    MaleMeasurement[]
  blocks              Block[]             @relation("UserBlocks")
  blockedBy           Block[]             @relation("BlockedUsers")
  articleByUser       Article[]
  commandeByUser      Commande[]
  share Share[]

  @@map("user")
}

model Block {
  id        Int  @id @default(autoincrement())
  blockerId Int
  blockedId Int
  blocker   User @relation("UserBlocks", fields: [blockerId], references: [id])
  blocked   User @relation("BlockedUsers", fields: [blockedId], references: [id])

  @@unique([blockerId, blockedId])
  @@map("block")
}

model Report {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  reason    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])

  @@map("report")
}

model UserFollow {
  id          Int  @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User @relation("Followers", fields: [followerId], references: [id])
  following   User @relation("Followings", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("user_follow")
}

model Post {
  id           Int           @id @default(autoincrement())
  content      String
  description  String?       @db.VarChar(800)
  status       Boolean       @default(true)
  views        Int           @default(0)
  authorId     Int
  author       User          @relation(fields: [authorId], references: [id])
  publishedAt  DateTime      @default(now())
  nbFavorites  Int           @default(0)
  rates        Rate[]
  comments     Comment[]
  postLikes    PostLike[]
  postDislikes PostDislike[]
  reports      Report[]
  favorites    Favorite[]
  tag          Tag[]
  share Share[]

  @@map("post")
}

model Tag {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  articles Article[]
  posts    Post[]

  @@map("tag")
}

model Article {
  id               Int               @id @default(autoincrement())
  name             String
  stockQuantity    Int
  unitPrice        Float
  photo            String
  color            String?
  userId           Int
  user             User              @relation(fields: [userId], references: [id])
  categoryId       Int
  category         Category          @relation(fields: [categoryId], references: [id])
  tags             Tag[]
  commandeArticles CommandeArticle[]

  @@map("article")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  image    String
  unitId   Int
  unit     Unit      @relation(fields: [unitId], references: [id])
  articles Article[]

  @@map("category")
}

model Unit {
  id                  Int          @id @default(autoincrement())
  name                String
  categories          Category[]
  conversionFromUnits Conversion[] @relation("ConversionFromUnits")
  conversiontoUnits   Conversion[] @relation("ConversiontoUnits")

  @@map("unit")
}

model Conversion {
  id         Int   @id @default(autoincrement())
  value      Float
  fromUnitId Int // unité de départ
  fromUnit   Unit  @relation("ConversionFromUnits", fields: [fromUnitId], references: [id])
  toUnitId   Int // unité d'arrivée
  toUnit     Unit  @relation("ConversiontoUnits", fields: [toUnitId], references: [id])

  @@map("conversion")
}

model Rate {
  id          Int      @id @default(autoincrement())
  stars       Float
  description String?  @db.VarChar(800)
  postId      Int
  post        Post     @relation(fields: [postId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime @default(now())

  @@map("rate")
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.VarChar(800)
  authorId  Int
  author    User      @relation(fields: [authorId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])
  postId    Int
  parentId  Int? // Nouvelle colonne pour les sous-commentaires
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("comment")
}

model PostDislike {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@map("post_dislike")
}

model PostLike {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())

  @@map("post_like")
}

model Message {
  id         Int      @id @default(autoincrement())
  senderId   Int
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id])
  receiverId Int
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("message")
}

model Notification {
  id         Int      @id @default(autoincrement())
  receiverId Int
  receiver   User     @relation("UserNotifications", fields: [receiverId], references: [id])
  emetorId   Int?
  emetor     User?    @relation("EmetorNotifications", fields: [emetorId], references: [id])
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)
  type       String
  postId     Int?

  @@map("notification")
  @@index([receiverId])
  @@index([emetorId])
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())

  @@map("favorite")
}

model Recharge {
  id         Int      @id @default(autoincrement())
  user       User     @relation("UserRecharges", fields: [userId], references: [id])
  userId     Int
  receiverId Int?
  receiver   User?    @relation("ReceivedRecharges", fields: [receiverId], references: [id])
  code       BigInt   @unique
  amount     Float
  isUsed     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@map("recharge")
}

model Story {
  id          Int      @id @default(autoincrement())
  content     String
  description String?  @db.VarChar(200)
  authorId    Int
  author      User     @relation(fields: [authorId], references: [id])
  publishedAt DateTime @default(now())
  expiresAt   DateTime

  @@map("story")
}

enum Gender {
  MALE
  FEMALE
}

model MaleMeasurement {
  id           Int    @id @default(autoincrement())
  user         User   @relation(fields: [userId], references: [id])
  userId       Int
  shoulder     Float?
  chest        Float?
  waist        Float?
  hips         Float?
  sleeveLength Float?
  neck         Float?
  back         Float?
  armhole      Float?
  thigh        Float?
  calf         Float?

  @@map("male_measurement")
}

model FemaleMeasurement {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  shoulder Float?
  chest    Float?
  waist    Float?
  hips     Float?
  bust     Float?
  inseam   Float?
  thigh    Float?

  @@map("female_measurement")
}

model Commande {
  id               Int               @id @default(autoincrement())
  userId           Int
  user             User              @relation(fields: [userId], references: [id])
  totalPrice       Float             @default(0)
  etat             CommandeEtat      @default(PENDING) // Ajout de l'état
  commandeArticles CommandeArticle[]
  date             DateTime          @default(now())

  @@map("commande")
}

enum CommandeEtat {
  PENDING
  CONFIRMED
  CANCELED
  TAKED
}

model CommandeArticle {
  id           Int      @id @default(autoincrement())
  commandeId   Int
  commande     Commande @relation(fields: [commandeId], references: [id])
  articleId    Int
  article      Article  @relation(fields: [articleId], references: [id])
  quantity     Int
  prixUnitaire Float
  unitId       Int

  @@map("commande_article")
}

model BlackListToken {
  id    Int    @id @default(autoincrement())
  token String @unique

  @@map("blacklist_token")
}

model Share {
  id         Int      @id @default(autoincrement())
  postId     Int
  post       Post     @relation(fields: [postId], references: [id])
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@map("share")
}

